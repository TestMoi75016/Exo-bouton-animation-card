:root {                    /*Variables de couleurs. Chaque fois que je dirais color1 par ex:la couleur 1 sera attribué à l'élément. Les 4 couleurs choisis vont bien ensemble*/
    --color1: #ede4d0;
    --color2: pink;
    --color3: #393b4b;
    --color4: rgb(18, 19, 19);
}

.card {
    width: calc(100% - 50px);
    padding: 5px;
    background:  linear-gradient(90deg, rgba(2,0,36,1) 0%, rgba(9,9,121,1) 35%, rgba(0,212,255,1) 100%);;
    margin-top: 100px;
    border-radius: 20px;
}

.checkbox-container {
    display: flex;
    justify-content: space-around;
}

input[type="checkbox"] {
    display: none;
}

label {
    cursor: pointer;
    background: var(--color3);
    padding: 10px;
    border-radius: 10px;
    font-size: 1.1rem;
    border: 1px solid var(--color1);
    user-select: none;   /*EMEPCHE la sélection par l'user*/
    font-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;
    color: var(--color1);
    transition: 0.2s;  /*La transition doit être dans le label*/
}

input[type="checkbox"]:checked + label {
    background: green;
    filter: brightness(200%);
    transform: scale(1.3);
    
}

.email {  
    padding-top: 30px;
    text-align: center;  /*L'input type"email" dans la class email est de type text donc on peut utiliser text align center*/
    margin-bottom: 20px;
}

.email input {
    text-align: center;
    font-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;
    padding: 20px;
    width: 60%;
    min-width: 180px;
    max-width:510px;
    outline: none;
    color: var(--color2);
    border: 3px solid var(--color2) transparent;
    border-radius:5px;
}

input[type="email"]::placeholder {
    color: var(--color2);
    font-size: 1.1rem;
}

input[type="email"]:focus { /*Quand l'user tape dans l'input alors ces comportement apparaissent*/
    background: transparent;
    border-radius: 150px;
    border: 3px solid var(--color2);
}

h1 {
    text-align: center;
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    color: var(--color1);
}



button {
    display: block;
    margin: 0 auto;
    justify-content: center;
    padding: 10px;
    border-radius:100px;
    font-size: 1.3rem;
    cursor: pointer;
    transition:0.2s;
    background: var(--color2);
    border: none;

}

button:hover {
    letter-spacing: 3px;
}

button:active {
    transform: scale(1.3);
}

a {
    display: block;
    opacity: 0;
    transform: translateY(40px);
    text-align: center;
    transition: 0.2s;
    font-family:'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
}

/* " ,:hover" permet de pouvoir clicker sur le lien ds la zone boutton-lien sinon le lien disparait*/
button:hover + a,:hover {
    opacity: 1;
    transform: translateY(0);
}

a:visited{
    color: var(--color2);
}

/*-----ANIMATION-----*/

h1::after {
    content:"";
    height: 1px;
    width: 100%;
    position: absolute;
    background: var(--color2);
    bottom:-10px;   /*décalage vers le bas de -10px*/
  /*Centrer la barre:*/
    left: 50%;   /*D'abord on positionne à 50% de la gauche*/
    transform: translateX(-50%) scale(0); /*Puis tu te décales sur l'axe des X de -50%, donc vers la gauche*/
    animation: h1anim 10s ease-in-out forwards; /*L'animation s'appelle ease-in-out et forwards stop l'animation après 10s. Infinite lance l'animation en continue*/
}

h1{
    position: relative;
}

@keyframes h1anim {
    100%{
        transform: translateX(-50%) scale(1);  /*Il faut réecrire translateX(-50%) car il est sinon "écrasé" par l'animation. Il faut lui faire un rappel*/
    }
}

/*Je dis au label option1 d'exécuter l'animation "label1anim" durée 1s et à l'infinit quand je fais un hover */
label:first-of-type:hover {
      animation: label1anim 1s infinite;
}

@keyframes label1anim {
   50% {      /*Je veux à la moitié de l'animation tu sois à échelle 1.4*/
    transform: scale(1.3);
   }
   100% {
    transform: scale(1);/*Je veux à la fin de l'animation tu retrouves ton échelle à 1*/
    }
}

/*je veux la même animation que ci-dessus mais pour le label option3 qui est 6eme enfant de son parent donc on utilise nth:child(6) pour s'addresser à lui.*/
label:nth-child(6):hover {  
    animation:label1anim 1s infinite;
}

/* 2eme animation */

label:nth-child(4):hover {
    animation: label2anim 3s infinite linear;
}

@keyframes label2anim {
    33% {
        transform: translateZ(20px);  /*Grossis vers nous*/
    }
    66% {
        transform: translateZ(10px); /*Rétressis loin de nous*/
    }
    100% {
        transform: translateZ(0px);  /*Retourne à sa forme de base*/
    }
}

.checkbox-container {
    perspective:40px;
}

/* -----3eme animation----- */

img {
    height: 50px;
    position: absolute;
    box-shadow: 0px 2px 6px 0px black;
    animation: claraAnim infinite 60s;
    z-index: -1;
}

@keyframes claraAnim {
    0%{
        top: 2%;
        left: 2%;
        transform: rotate(0deg);
    }
    10%{
        top: 10%;
        left: 10%;
        transform: rotate(0deg);
    }
    20%{
        top: 2%;
        left: 50%;
        transform: rotate(0deg);
    }
    30%{
        top: 2%;
        left: 66%;
        transform: rotate(0deg);
    }
    40%{
        top: 5%;
        left:90%;
        transform: rotate(0deg);
    }
    50%{
        top: 30%;
        left: 110%;
        transform: rotate(90deg);
    }
    60%{
        top: 80%;
        left: 95%;
        transform: rotate(0deg);
    }
    70%{
        top: 75%;
        left: 50%;
        transform: rotate(0deg);
    }
    80%{
        top: 70%;
        left: 30%;
        transform: rotate(0deg);
    }
   90%{
        top: 30%;
        left: 10%;
        transform: rotate(0deg);
    }
    100%{
        top: 2%;
        left: 2%;
        transform: rotate(0deg);
    }
}